from os import path, sep, mkdir, system, _exit, getlogin, listdir, getcwd, sep
from glob import glob
from sys import argv
import pandas as pd
import numpy as np
import re




"""
---------------------------------------------------------------------------------------------------------------------------

    This scripts collects the results of a parameter screening and generate a summary of the results

---------------------------------------------------------------------------------------------------------------------------
"""



def get_last_output(sim_folder_path):
    """
    Return the path to the last cell_data and face_data result of a simulation

    Parameters:
    ----------

    sim_folder_path (str):
        The absolute path to the folder where the simulation data are stored

    Return:
    ------

    last_cell_data_path (str):
        The absolute path to the last cell_data.vtk mesh file generated by the simulation
    
    last_face_data_path (str):
        The absolute path to the last face_data.vtk mesh file generated by the simulation
    """

    assert path.exists(sim_folder_path), "The given simulation folder does not exist: " + sim_folder_path

    #The folder where the cell_data and face_data meshes are stored
    cell_data_folder = path.join(sim_folder_path, "cell_data")
    face_data_folder = path.join(sim_folder_path, "face_data")
    assert path.exists(cell_data_folder), "The given simulation folder does not exist: " + cell_data_folder
    assert path.exists(face_data_folder), "The given simulation folder does not exist: " + face_data_folder

    #Get the path to the files in the cell_data and face_data folders
    face_data_mesh_file_lst = listdir(face_data_folder)

    #Create a list of pairs, where the first element is the path to a cell_data or face_data file path
    #and the second element is the iteration id of the file. Only do that for the cell_data files.
    name_id_pair_lst = []

    #Loop over the cell_data mesh file path
    for file_path in face_data_mesh_file_lst: 

        #use a regex to get the iteration id of each file
        m = re.search('^[a-z_]*([0-9]+).vtk', file_path)
        file_iteration_id = int(m.group(1))

        name_id_pair_lst.append([file_path, file_iteration_id])

    #Sort now the files to get the file with the highest iteration id
    name_id_pair_lst = sorted(name_id_pair_lst, key=lambda x: x[1])   

    #Get the last iteration id of the simulation
    last_iteration_id = name_id_pair_lst[-1][1]

    #Generate the name of the last cell_data and face_data mesh file
    last_cell_data_path = path.join(cell_data_folder, "result_{}.vtk".format(last_iteration_id))
    last_face_data_path = path.join(face_data_folder, "result_{}.vtk".format(last_iteration_id))
    return last_cell_data_path, last_face_data_path


def which_crashed(std_out_folder_path):
    """
    Return a list of booleans of length equal to the number of simulation, which are
    true if the correspomdent simulation has crashed, false otherwise.

    Parameters:
    ----------

    std_out_folder_path (str):
        The absolute path to the folder where the std_out_err files are stored

    Return:
    ------

    is_crashed: (List[bool])
    """

    assert path.exists(std_out_folder_path), "The given folder does not exist: " + std_out_folder_path
    
    file_lst = listdir(std_out_folder_path)
    path_lst = [
        path.join(std_out_folder_path, file) 
        for file in file_lst
    ]
    
    has_crashed = []
    for path_to_file in path_lst:
        with open(path_to_file, 'r') as f:
            last_line = f.readlines()[-1]
            if 'mesh_before_crash.vtk' in last_line:
                has_crashed.append(True)
            else:
                has_crashed.append(False)

    return has_crashed



if __name__ == "__main__":

    #Check that the name of the screen was given in command line input
    assert argv.__len__() == 2, "Wrong command line arguments: \n python3 collect_screening_data.py [screen_folder_path]"

    #Get the name of the screen
    screen_folder_path =  argv[1].strip()
    assert path.exists(screen_folder_path), "The given screen folder does not exist: " + screen_folder_path

    #Get the name of the screen
    screen_name_lst = screen_folder_path.split(sep)
    screen_name_lst = [x for x in screen_name_lst if x != ""]
    screen_name = screen_name_lst[-1]

    #Create a directory where the summary of the simulations will be stored
    summary_folder_path = path.join(screen_folder_path, "summary_folder_" + screen_name)
    mkdir(summary_folder_path)

    #Generate different folders to store the end result of each simulation
    mkdir(path.join(summary_folder_path, "cell_data"))
    mkdir(path.join(summary_folder_path, "face_data"))
    mkdir(path.join(summary_folder_path, "simulation_statistics"))

    #Copy the parameters used for the screen in the summary folder
    parameter_folder = path.join(screen_folder_path, "parameters") 
    system("cp -r {} {}".format(parameter_folder, summary_folder_path))

    #Copy the standard output and error in the summary folder
    stdout_folder = path.join(screen_folder_path, "std_out_err") 
    system("cp -r {} {}".format(stdout_folder, summary_folder_path))

    #Get the path to the parameter table used for the simulation
    csv_file_lst = glob(path.join(screen_folder_path, "*.csv"))
    assert csv_file_lst.__len__() == 1, "More than one csv file in {}".format(screen_folder_path)
    parameters_table_path = csv_file_lst[0]

    #Open the parameter table
    parameter_table_df = pd.read_csv(parameters_table_path, delimiter=",")

    #Check that there are multiple columns in parameter_table_df, it's a quick proxy to check that the correct delimiter was used
    assert parameter_table_df.shape[1] > 1, """A wrong delimiter was used in the csv file {}, the correct delimiter is: "," """.format(parameters_table_path)

    #Get the list of folders corresponding to the outputs of the different simulations
    sim_dir_lst = listdir(path.join(screen_folder_path, "simulation_outputs"))

    #Store in a list the number of files created by each simulations
    file_count_lst = []
    crashed_lst = []

    #Loop over the ids of the simulations
    for sim_id in range(1, parameter_table_df.shape[0]+1):

        #Check if a folder corresponding to this simulation has been created
        sim_folder_path = path.join(screen_folder_path, "simulation_outputs", "simulation_{}".format(sim_id))

        #If the simulation folder does not exist
        if not path.exists(sim_folder_path): 
            file_count_lst.append(0)
            crashed_lst.append(True)
            continue

        #Check if the file `mesh_before_crash.vtk` is in the folder
        crashed_lst.append('mesh_before_crash.vtk' in listdir(sim_folder_path))

        #If it exists we compute the number of files created
        nb_files_generated = listdir(path.join(sim_folder_path, "face_data")).__len__()
        file_count_lst.append(nb_files_generated)

        #If the simulation crashed immediately
        if nb_files_generated == 0: continue
        
        #Copy the simulation statistics into the summary folder
        simulation_stat_path = path.join(sim_folder_path, "simulation_statistics.csv")
        system("cp {} {}".format(simulation_stat_path, path.join(summary_folder_path, "simulation_statistics", "simulation_{}.csv".format(sim_id))))

        #Get the path to the last cell_data and face_data mesh file
        last_cell_data_path, last_face_data_path = get_last_output(sim_folder_path)

        #Make sure they exist
        assert path.exists(last_cell_data_path),"Last cell_data mesh file path does not exist: " + last_cell_data_path
        assert path.exists(last_face_data_path),"Last face_data mesh file path does not exist: " + last_face_data_path

        #Copy the files to the decdicated summary folder
        system("cp {} {}".format(last_cell_data_path, path.join(summary_folder_path, "cell_data", "simulation_{}.vtk".format(sim_id))))
        system("cp {} {}".format(last_face_data_path, path.join(summary_folder_path, "face_data", "simulation_{}.vtk".format(sim_id))))

    #Before finishing, edit the parameter_table_df file and store the number of files generated by each simulation in a new column
    parameter_table_df["file_count"] = file_count_lst

    #Store also a column to identify crashed simulations
    parameter_table_df['has_crashed'] = crashed_lst

    parameter_table_df.to_csv(parameters_table_path, sep=",")
    system("""cp {} {}""".format(parameters_table_path,summary_folder_path))	










